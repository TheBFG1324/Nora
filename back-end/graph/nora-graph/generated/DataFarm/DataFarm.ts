// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FarmCreated extends ethereum.Event {
  get params(): FarmCreated__Params {
    return new FarmCreated__Params(this);
  }
}

export class FarmCreated__Params {
  _event: FarmCreated;

  constructor(event: FarmCreated) {
    this._event = event;
  }

  get farmId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }

  get farmType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get bountyType(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get payout(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get maxPayout(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get payloadHash(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get payoutPeriod(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ResponseAdded extends ethereum.Event {
  get params(): ResponseAdded__Params {
    return new ResponseAdded__Params(this);
  }
}

export class ResponseAdded__Params {
  _event: ResponseAdded;

  constructor(event: ResponseAdded) {
    this._event = event;
  }

  get farmId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get payload(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get responder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RewardsSent extends ethereum.Event {
  get params(): RewardsSent__Params {
    return new RewardsSent__Params(this);
  }
}

export class RewardsSent__Params {
  _event: RewardsSent;

  constructor(event: RewardsSent) {
    this._event = event;
  }

  get farmId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get numberOfResponders(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payoutPerResponder(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DataFarm__farmsResult {
  value0: Bytes;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;
  value5: Bytes;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Bytes,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
    value5: Bytes,
    value6: BigInt,
    value7: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getFarmId(): Bytes {
    return this.value0;
  }

  getFarmType(): i32 {
    return this.value1;
  }

  getBountyType(): i32 {
    return this.value2;
  }

  getPayout(): BigInt {
    return this.value3;
  }

  getMaxPayout(): BigInt {
    return this.value4;
  }

  getPayloadHash(): Bytes {
    return this.value5;
  }

  getPayoutPeriod(): BigInt {
    return this.value6;
  }

  getTimestamp(): BigInt {
    return this.value7;
  }
}

export class DataFarm__getFarmResultValue0Struct extends ethereum.Tuple {
  get farmId(): Bytes {
    return this[0].toBytes();
  }

  get farmType(): i32 {
    return this[1].toI32();
  }

  get bountyType(): i32 {
    return this[2].toI32();
  }

  get payout(): BigInt {
    return this[3].toBigInt();
  }

  get maxPayout(): BigInt {
    return this[4].toBigInt();
  }

  get payloadHash(): Bytes {
    return this[5].toBytes();
  }

  get responses(): Array<DataFarm__getFarmResultValue0ResponsesStruct> {
    return this[6].toTupleArray<DataFarm__getFarmResultValue0ResponsesStruct>();
  }

  get payoutPeriod(): BigInt {
    return this[7].toBigInt();
  }

  get timestamp(): BigInt {
    return this[8].toBigInt();
  }
}

export class DataFarm__getFarmResultValue0ResponsesStruct extends ethereum.Tuple {
  get payload(): Bytes {
    return this[0].toBytes();
  }

  get responder(): Address {
    return this[1].toAddress();
  }
}

export class DataFarm__getFarmsResultValue0Struct extends ethereum.Tuple {
  get farmId(): Bytes {
    return this[0].toBytes();
  }

  get farmType(): i32 {
    return this[1].toI32();
  }

  get bountyType(): i32 {
    return this[2].toI32();
  }

  get payout(): BigInt {
    return this[3].toBigInt();
  }

  get maxPayout(): BigInt {
    return this[4].toBigInt();
  }

  get payloadHash(): Bytes {
    return this[5].toBytes();
  }

  get responses(): Array<DataFarm__getFarmsResultValue0ResponsesStruct> {
    return this[6].toTupleArray<DataFarm__getFarmsResultValue0ResponsesStruct>();
  }

  get payoutPeriod(): BigInt {
    return this[7].toBigInt();
  }

  get timestamp(): BigInt {
    return this[8].toBigInt();
  }
}

export class DataFarm__getFarmsResultValue0ResponsesStruct extends ethereum.Tuple {
  get payload(): Bytes {
    return this[0].toBytes();
  }

  get responder(): Address {
    return this[1].toAddress();
  }
}

export class DataFarm extends ethereum.SmartContract {
  static bind(address: Address): DataFarm {
    return new DataFarm("DataFarm", address);
  }

  chainlinkAddress(): Address {
    let result = super.call(
      "chainlinkAddress",
      "chainlinkAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_chainlinkAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "chainlinkAddress",
      "chainlinkAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  farmIdToIndex(param0: Bytes): BigInt {
    let result = super.call(
      "farmIdToIndex",
      "farmIdToIndex(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBigInt();
  }

  try_farmIdToIndex(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "farmIdToIndex",
      "farmIdToIndex(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  farms(param0: BigInt): DataFarm__farmsResult {
    let result = super.call(
      "farms",
      "farms(uint256):(bytes32,uint8,uint8,uint256,uint256,bytes32,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new DataFarm__farmsResult(
      result[0].toBytes(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBytes(),
      result[6].toBigInt(),
      result[7].toBigInt(),
    );
  }

  try_farms(param0: BigInt): ethereum.CallResult<DataFarm__farmsResult> {
    let result = super.tryCall(
      "farms",
      "farms(uint256):(bytes32,uint8,uint8,uint256,uint256,bytes32,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DataFarm__farmsResult(
        value[0].toBytes(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBytes(),
        value[6].toBigInt(),
        value[7].toBigInt(),
      ),
    );
  }

  getFarm(index: BigInt): DataFarm__getFarmResultValue0Struct {
    let result = super.call(
      "getFarm",
      "getFarm(uint256):((bytes32,uint8,uint8,uint256,uint256,bytes32,(bytes32,address)[],uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );

    return changetype<DataFarm__getFarmResultValue0Struct>(result[0].toTuple());
  }

  try_getFarm(
    index: BigInt,
  ): ethereum.CallResult<DataFarm__getFarmResultValue0Struct> {
    let result = super.tryCall(
      "getFarm",
      "getFarm(uint256):((bytes32,uint8,uint8,uint256,uint256,bytes32,(bytes32,address)[],uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DataFarm__getFarmResultValue0Struct>(value[0].toTuple()),
    );
  }

  getFarms(): Array<DataFarm__getFarmsResultValue0Struct> {
    let result = super.call(
      "getFarms",
      "getFarms():((bytes32,uint8,uint8,uint256,uint256,bytes32,(bytes32,address)[],uint256,uint256)[])",
      [],
    );

    return result[0].toTupleArray<DataFarm__getFarmsResultValue0Struct>();
  }

  try_getFarms(): ethereum.CallResult<
    Array<DataFarm__getFarmsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getFarms",
      "getFarms():((bytes32,uint8,uint8,uint256,uint256,bytes32,(bytes32,address)[],uint256,uint256)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<DataFarm__getFarmsResultValue0Struct>(),
    );
  }

  hasResponded(param0: Bytes, param1: Address): boolean {
    let result = super.call(
      "hasResponded",
      "hasResponded(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBoolean();
  }

  try_hasResponded(
    param0: Bytes,
    param1: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasResponded",
      "hasResponded(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _chainlinkAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateFarmCall extends ethereum.Call {
  get inputs(): CreateFarmCall__Inputs {
    return new CreateFarmCall__Inputs(this);
  }

  get outputs(): CreateFarmCall__Outputs {
    return new CreateFarmCall__Outputs(this);
  }
}

export class CreateFarmCall__Inputs {
  _call: CreateFarmCall;

  constructor(call: CreateFarmCall) {
    this._call = call;
  }

  get _description(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _farmType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _bountyType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _payout(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxPayout(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _payloadHash(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _payoutPeriod(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateFarmCall__Outputs {
  _call: CreateFarmCall;

  constructor(call: CreateFarmCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InsertInstanceCall extends ethereum.Call {
  get inputs(): InsertInstanceCall__Inputs {
    return new InsertInstanceCall__Inputs(this);
  }

  get outputs(): InsertInstanceCall__Outputs {
    return new InsertInstanceCall__Outputs(this);
  }
}

export class InsertInstanceCall__Inputs {
  _call: InsertInstanceCall;

  constructor(call: InsertInstanceCall) {
    this._call = call;
  }

  get farmId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get payload(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get responder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InsertInstanceCall__Outputs {
  _call: InsertInstanceCall;

  constructor(call: InsertInstanceCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SendRewardsCall extends ethereum.Call {
  get inputs(): SendRewardsCall__Inputs {
    return new SendRewardsCall__Inputs(this);
  }

  get outputs(): SendRewardsCall__Outputs {
    return new SendRewardsCall__Outputs(this);
  }
}

export class SendRewardsCall__Inputs {
  _call: SendRewardsCall;

  constructor(call: SendRewardsCall) {
    this._call = call;
  }

  get farmId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SendRewardsCall__Outputs {
  _call: SendRewardsCall;

  constructor(call: SendRewardsCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
